/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplecardmanager2;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Properties;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListModel;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hadi Najafi
 */
public class MainWindow extends javax.swing.JFrame {

    private Properties prop;
    private FileOps fileOps;
    String[] labels = {"Card Number", "Account Number", "cvv2", "Owner", "Valid Date", "Bank Name", "Bank Address", "Phone", "Email", "Name"};
    private static int row;
    private int col = 1;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        table.getTableHeader().setFont(new Font("Century Gothic", Font.BOLD, 14));
        //table.getTableHeader().setBackground(new Color(204, 204, 204));
        table.getTableHeader().setOpaque(false);
        table.getTableHeader().setBorder(new LineBorder(new Color(204, 204, 204), 1));
        prop = new Properties();
        for (String s : labels) {
            prop.put(s, "");
        }
        fileOps = new FileOps();
        cardList.setListData(fileOps.getAllFiles());
        loadDataListener();
        tableMenu();
    }

    public static void setRow(int row){
        MainWindow.row = row;
    }
    
    private void tableMenu() {
        table.setComponentPopupMenu(popupMenu);
        table.addMouseListener(new TableMouseListener(table));
    }

    public void loadDataListener() {
        cardList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e); //To change body of generated methods, choose Tools | Templates.
                load();
            }

        });

    }

    private void load() {
        fileOps.setFileName(cardList.getSelectedValue());
        fileOps.readData();
        prop = fileOps.getData();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        Object[] rowData = new Object[2];
        for (int i = 0; i < labels.length; i++) {
            rowData[0] = labels[i];
            rowData[1] = prop.getProperty(labels[i]);
            model.addRow(rowData);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        copyItem = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        cardList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        copyItem.setText("Copy");
        copyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemActionPerformed(evt);
            }
        });
        popupMenu.add(copyItem);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SimpleCardManager");
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cardList.setBackground(new java.awt.Color(240, 240, 240));
        cardList.setFont(new java.awt.Font("Candara", 0, 13)); // NOI18N
        cardList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        cardList.setFocusable(false);
        jScrollPane1.setViewportView(cardList);

        jLabel1.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        jLabel1.setText("List of Cards");

        jLabel2.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        jLabel2.setText("Card Details");

        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simplecardmanager2/icons/save++.png"))); // NOI18N
        saveBtn.setToolTipText("Save a card");
        saveBtn.setContentAreaFilled(false);
        saveBtn.setFocusable(false);
        saveBtn.setMaximumSize(new java.awt.Dimension(33, 33));
        saveBtn.setMinimumSize(new java.awt.Dimension(33, 33));
        saveBtn.setPreferredSize(new java.awt.Dimension(33, 33));
        saveBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/simplecardmanager2/icons/saveC++.png"))); // NOI18N
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simplecardmanager2/icons/delete.png"))); // NOI18N
        deleteBtn.setToolTipText("Delete a card");
        deleteBtn.setContentAreaFilled(false);
        deleteBtn.setFocusable(false);
        deleteBtn.setMaximumSize(new java.awt.Dimension(33, 33));
        deleteBtn.setMinimumSize(new java.awt.Dimension(33, 33));
        deleteBtn.setPreferredSize(new java.awt.Dimension(33, 33));
        deleteBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/simplecardmanager2/icons/deleteClicked.png"))); // NOI18N
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/simplecardmanager2/icons/add.png"))); // NOI18N
        addBtn.setToolTipText("Add a card");
        addBtn.setBorder(null);
        addBtn.setContentAreaFilled(false);
        addBtn.setFocusable(false);
        addBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/simplecardmanager2/icons/addClicked.png"))); // NOI18N
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));

        table.setBackground(new java.awt.Color(240, 240, 240));
        table.setFont(new java.awt.Font("Ebrima", 0, 13)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setFocusable(false);
        table.setRowHeight(22);
        table.getTableHeader().setResizingAllowed(false);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addBtn, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        String name = JOptionPane.showInputDialog(rootPane, "Choose a name", "Choose Name", JOptionPane.INFORMATION_MESSAGE);
        if(fileOps.checkExist(name)){
            JOptionPane.showMessageDialog(rootPane, "This name is already exist! choose another name.", "Failed to Create New File", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if (name == null || name == "") {
            return;
        } else {
            ListModel<String> model = cardList.getModel();
            int size = model.getSize();
            Vector<String> listData = new Vector<>();
            for (int i = 0; i < size; i++) {
                listData.add(model.getElementAt(i));
            }
            listData.add(name);
            cardList.setListData(listData);
            fileOps.setFileName(name);
            fileOps.createNewFile();
            for (String s : labels) {
                prop.setProperty(s, "");
            }
            prop.setProperty("Name", name);
            fileOps.setData(prop);
            fileOps.writeData(); 
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        fileOps.setFileName(cardList.getSelectedValue());
        if(fileOps.getFileName() == null || fileOps.getFileName() == ""){
            JOptionPane.showMessageDialog(rootPane, "You must select a card to Save!", "Failed to Save", JOptionPane.ERROR_MESSAGE);
            return;
        }
        fileOps.readData();
        prop = fileOps.getData();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for (int i = 0; i < labels.length; i++) {
            prop.setProperty(labels[i], (String) model.getValueAt(i, 1));
        }
        fileOps.setData(prop);
        fileOps.renameFile(prop.getProperty("Name"));
        fileOps.writeData();
        cardList.setListData(fileOps.getAllFiles());
        cardList.setSelectedValue(prop.getProperty("Name"), true);
    }//GEN-LAST:event_saveBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        fileOps.setFileName(cardList.getSelectedValue());
        if(fileOps.getFileName() == null || fileOps.getFileName() == ""){
            JOptionPane.showMessageDialog(rootPane, "You must select a card to delete!", "Failed to Delete", JOptionPane.ERROR_MESSAGE);
            return;
        }
        fileOps.deleteFile();
        cardList.setListData(fileOps.getAllFiles());
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    }//GEN-LAST:event_formWindowClosing

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        popupMenu.setVisible(false);
    }//GEN-LAST:event_formMouseClicked

    private void copyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyItemActionPerformed
        StringSelection stringSelection = new StringSelection((String) table.getModel().getValueAt(row, col));
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_copyItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JList<String> cardList;
    private javax.swing.JMenuItem copyItem;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}

class TableMouseListener extends MouseAdapter {

    private JTable table;

    public TableMouseListener(JTable table) {
        this.table = table;
    }

    @Override
    public void mousePressed(MouseEvent e) {
        if (e.getButton() == 3) {
            Point point = e.getPoint();
            int currentRow = table.rowAtPoint(point);
            table.setRowSelectionInterval(currentRow, currentRow);
            MainWindow.setRow(currentRow);
        }
    }

}
